<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- Specifying base package of the Components like Controller, Service, 
		DAO -->
	<context:component-scan
		base-package="com.rau.crud" />
	<!-- Getting Database properties -->
	<context:property-placeholder
		location="classpath:application.properties" />

	<!-- allow to use annotation like Controller, Service, DAO -->
	<mvc:annotation-driven />

	<!-- Specifying the Resource location to load JS, CSS, Images etc -->
	<mvc:resources location="/resources/**"
		mapping="/resources/" />

	<!-- View Resolver -->
	
		<bean
			class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/views/" /> <!--instead of views folder you can give your folder name where you'll create 
				jsp files -->
			<property name="suffix" value=".jsp" /><!-- if you're not using 
				jsp then provide your file's extention -->
		</bean>

		<!-- DataSource -->
		<bean id="dataSource"
			class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
			<!-- The destroy-method="close" is needed when you are using apache commons 
				DBCP's BasicDataSource or C3P0's ComboPooledDataSource to shutdown the data 
				source immediately when the spring application shuts down. This is not needed 
				in the org.springframework.jdbc.datasource.DriverManagerDataSource. This 
				class doesn't even have any form of destroy method. Spring manages that for 
				you. Just remove the destroy-method attribute from your bean definition. -->
			<property name="driverClassName" value="${database.driver}"></property>
			<property name="url" value="${database.url}"></property>
			<property name="username" value="${database.user}"></property>
			<property name="password" value="${database.password}"></property>
		</bean>

		<!-- Hibernate SessionFactory by Spring. In dao,autowired sessionFactory with hibernate sessionFactory -->
		<bean id="sessionFactory"
			class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="hibernateProperties"> <!-- Data type of hibernateProperties is java.util.Properties -->
				<props>
					<prop key="hibernate.dialect">${hibernate.dialect}</prop>
					<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
					<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
					<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				</props>
			</property>
			<property name="packagesToScan" value="com.rau.crud.entity" /> <!-- Specify packages to search for autodetection of your entity classes 
				in the classpath. This is analogous to Spring's component-scan feature -->
		</bean>


		<!-- Hibernate Transaction by Spring -->
		<bean id="transactionManager"
			class="org.springframework.orm.hibernate5.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>
       
       <!-- It scans all beans in the application context and creates AOP interceptor for those which are annotated.This is done via the SpringTransactionAnnotationParser, which is used by TransactionInterceptor - the aformentioned interceptor. Then whenever these beans are accessed, this advice is triggered and a transaction is started before the target method is executed, and committed after the execution. -->
       <tx:annotation-driven transaction-manager="transactionManager" />

	</beans>
